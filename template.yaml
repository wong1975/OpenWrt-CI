#
# 版权所有 (c) 2022-2023 Curious <https://www.curious.host>
#
# 本软件遵循 MIT 许可证开源发布。
# 详情请查看 /LICENSE 文件。
# 
# https://github.com/Curious-r/OpenWrtBuildWorkflows
# 说明：自动检查 OpenWrt 源代码更新并进行编译，无需额外的密钥。
#
# 部分功能源自 https://github.com/P3TERX/Actions-OpenWrt，访问该仓库以获取相关版权信息。
#-------------------------------------------------------------------------------------------------------

name: 为 Example-Device 构建 Example-Firmware

on:
  workflow_dispatch:
    inputs:
      manual_config:
        description: "Manually generate XiaoMi-AX3600 config via SSH (y/n)"
        default: "y"
        required: true

env:
  REPO_NAME: immortalwrt
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  BUILD_DEPENDS: |
    ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential
    bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib
    git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev
    libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev
    libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3
    python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo
    uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev clang file nano aria2
  CONFIG_FILE: .config
  # CUSTOM_SCRIPT_1: example-custom-script-1.sh
  # CUSTOM_SCRIPT_2: example-custom-script-2.sh
  STORE_PRODUCTS: false
  STORE_FIRMWARE: true
  COWTRANSFER_FIRMWARE: false
  WETRANSFER_FIRMWARE: false
  RELEASE_FIRMWARE: false
  TIME_ZONE: Asia/Shanghai

jobs:
  build:
    name: 构建固件
    runs-on: ubuntu-latest
    container:
      image: debian:11
    permissions:
      contents: write
    if: needs.check.outputs.cache-hit != 'true' || github.event.inputs.force-build == 'true'
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 释放磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt-get update
          apt-get install -y tzdata gnupg
          apt-get install -y $BUILD_DEPENDS
          apt-get autoremove --purge -y
          apt-get clean
          echo "$TIME_ZONE" > /etc/timezone
          mkdir -p /workdir/
          chown $(id -u):$(id -g) /workdir/

      - name: 克隆源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 --branch $REPO_BRANCH --single-branch $REPO_URL openwrt/
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 运行自定义脚本 1
        if: env.CUSTOM_SCRIPT_1
        run: |
          chmod +x $CUSTOM_SCRIPT_1 || true
          cd openwrt/
          [ -f "$GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1" ] && $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1 || echo "无自定义脚本1"

      - name: 更新 feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装 feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 加载自定义配置
        run: |
          [ -e files ] && mv files/ openwrt/files/
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

      - name: 运行自定义脚本 2
        if: env.CUSTOM_SCRIPT_2
        run: |
          chmod +x $CUSTOM_SCRIPT_2 || true
          cd openwrt/
          [ -f "$GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2" ] && $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2 || echo "无自定义脚本2"

      - name: SSH 远程调试（tmate）进入 menuconfig
        if: ${{ github.event.inputs.manual_config == 'y' }}
        uses: mxschmitt/action-tmate@v3

      - name: Upload .config from all possible locations
        uses: actions/upload-artifact@v4
        with:
          name: config
          path: |
            $GITHUB_WORKSPACE/openwrt/.config
            found.config
            .config

      - name: 下载编译所需的软件包
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) 线程编译"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传所有编译产物
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.STORE_PRODUCTS == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/

      - name: 整理固件相关文件
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 上传固件到 Cowtransfer
        id: cowtransfer
        if: steps.organize-files.outputs.status == 'success' && env.COWTRANSFER_FIRMWARE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::notice file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 上传固件到 WeTransfer
        id: wetransfer
        if: steps.organize-files.outputs.status == 'success' && env.WETRANSFER_FIRMWARE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::notice file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 生成发布标签
        id: tag
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "构建来源 $REPO_URL $REPO_BRANCH" >> release.txt
          [ $COWTRANSFER_FIRMWARE = true -o $WETRANSFER_FIRMWARE = true ] && echo '产品传输:' >> release.txt
          [ $COWTRANSFER_FIRMWARE = true ] && echo \
            "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $WETRANSFER_FIRMWARE = true ] && echo \
            "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件到 GitHub Release
        uses: softprops/action-gh-release@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

  clean:
    name: 清理旧的构建产物
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write

    steps:
      - name: 删除旧的工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 1

      - name: 删除旧的 Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
