#
# 版权所有 (c) 2022-2023 Curious <https://www.curious.host>
#
# 本软件遵循 MIT 许可证开源发布。
# 详情请查看 /LICENSE 文件。
# 
# https://github.com/Curious-r/immortalwrtBuildWorkflows
# 说明：自动检查 immortalwrt 源代码更新并进行编译，无需额外的密钥。
#
# 部分功能源自 https://github.com/P3TERX/Actions-immortalwrt，访问该仓库以获取相关版权信息。
#-------------------------------------------------------------------------------------------------------

name: 为 Example-Device 构建 Example-Firmware

on:
  workflow_dispatch:
    inputs:
      manual_config:
        description: "Manually generate XiaoMi-AX3600 config via SSH (y/n)"
        default: "y"
        required: true

env:
  REPO_NAME: immortalwrt
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  BUILD_DEPENDS: |
    ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential
    bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib
    g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev
    libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev
    libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano
    ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils
    python3-pyelftools python3-netifaces qemu-utils re2c rsync scons squashfs-tools subversion swig
    texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
  CONFIG_FILE: .config
  STORE_PRODUCTS: false
  STORE_FIRMWARE: true
  COWTRANSFER_FIRMWARE: false
  WETRANSFER_FIRMWARE: false
  RELEASE_FIRMWARE: false
  TIME_ZONE: Asia/Shanghai

jobs:
  build:
    name: 构建固件
    runs-on: ubuntu-latest
    #container:
    #  image: immortalwrt/ci:latest
    permissions:
      contents: write
    if: needs.check.outputs.cache-hit != 'true' || github.event.inputs.force-build == 'true'
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

#      - name: 释放磁盘空间
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: false
#          android: true
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: true
#          swap-storage: false


      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -y
          sudo apt-get full-upgrade -y
          sudo apt-get install -y $BUILD_DEPENDS

      - name: 克隆源代码
        working-directory: ${{ github.workspace }}
        run: |
          df -hT "$PWD"
          git clone --depth 1 --branch "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt/

      - name: 运行自定义脚本 1
        if: env.CUSTOM_SCRIPT_1
        run: |
          chmod +x "$CUSTOM_SCRIPT_1" || true
          cd openwrt/
          [ -f "$GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1" ] && "$GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1" || echo "无自定义脚本1"

      - name: 更新 feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装 feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 修正 Rust Makefile 以跳过 CI-LLVM 下载
        run: sed -i 's/--set=llvm\.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/' openwrt/feeds/packages/lang/rust/Makefile

      - name: 加载自定义配置
        run: |
          [ -e files ] && mv files/ openwrt/files/
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

      - name: 运行自定义脚本 2
        if: env.CUSTOM_SCRIPT_2
        run: |
          chmod +x "$CUSTOM_SCRIPT_2" || true
          cd openwrt/
          [ -f "$GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2" ] && "$GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2" || echo "无自定义脚本2"

      - name: SSH 远程调试（tmate）进入 menuconfig
        if: ${{ github.event.inputs.manual_config == 'y' }}
        uses: mxschmitt/action-tmate@v3

      - name: 检查并复制 .config 文件
        run: |
          if [ -f openwrt/.config ]; then
            ls -l openwrt/.config
            cp openwrt/.config $GITHUB_WORKSPACE/found.config
            echo ".config 文件已成功复制到 found.config"
          else
            echo "错误：openwrt/.config 文件不存在！"
            exit 1
          fi

      - name: 上传 .config Upload .config from all possible locations
        uses: actions/upload-artifact@v4
        with:
          name: config
          path: |
            .config
            openwrt/.config
            openwrt/found.config
            $GITHUB_WORKSPACE/openwrt/found.config
            found.config

      - name: 下载编译所需的软件包
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          #cp .config $GITHUB_WORKSPACE/XiaoMi-AX3600.config
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 上传 XiaoMi-AX3600.config
        uses: actions/upload-artifact@v4
        with:
          name: XiaoMi-AX3600
          path: |
            #.config
            found.config
            #openwrt/.config
            #openwrt/found.config
            #$GITHUB_WORKSPACE/.config
            $GITHUB_WORKSPACE/found.config

      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) 线程编译"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传所有编译产物
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.STORE_PRODUCTS == 'true'
        with:
          name: openwrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/

      - name: 整理固件相关文件
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        with:
          name: openwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      # 下面 cowtransfer/wetransfer/release 等步骤如有用也把 immortalwrt 路径改成 openwrt

  clean:
    name: 清理旧的构建产物
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write

    steps:
      - name: 删除旧的工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 1

      - name: 删除旧的 Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
