name: OpenWrt-AX3600-CI

on:
  workflow_dispatch:
    inputs:
      manual_config:
        description: "Manually generate config via SSH (y/n)"
        default: "n"
        required: true

env:
  REPO_NAME: immortalwrt
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  BUILD_DEPENDS: |
    ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential
    bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib
    g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev
    libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev
    libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano
    ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils
    python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs
    upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
  CONFIG_FILE: .config
  STORE_PRODUCTS: false
  STORE_FIRMWARE: true
  COWTRANSFER_FIRMWARE: false
  WETRANSFER_FIRMWARE: false
  RELEASE_FIRMWARE: false
  TIME_ZONE: Asia/Shanghai

jobs:
  build:
    name: 构建固件
    runs-on: ubuntu-latest
    #container:
    #  image: immortalwrt/ci:latest   # 也可以用 immortalwrt/ci:x86_64，推荐 latest
    permissions:
      contents: write
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 释放磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: 克隆源代码
        working-directory: ${{ github.workspace }}
        run: |
          df -hT "$PWD"
          git clone --depth 1 --branch "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt/

      - name: 加载自定义配置
        run: |
          mkdir -p openwrt
          echo "CONFIG_TARGET_qualcommax=y" > openwrt/.config
          echo "CONFIG_TARGET_qualcommax_ipq807x=y" >> openwrt/.config
          echo "CONFIG_TARGET_qualcommax_ipq807x_DEVICE_xiaomi_ax3600-stock=y" >> openwrt/.config

      - name: 生成最终 .config
        run: |
          cd openwrt
          make defconfig

      - name: 更新 feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装 feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 下载编译所需的软件包
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) 线程编译"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 整理固件相关文件
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        with:
          name: openwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
